-e \n\n--- ./src/components/Navbar.js ---\n\n
import React from 'react';
import { Link } from 'react-router-dom';

function Navbar() {
  return (
    <nav className="bg-purple-600 shadow-lg">
      <div className="container px-4 py-4 mx-auto">
        <div className="flex items-center justify-between">
          <Link to="/" className="text-2xl font-bold text-white">
            HuskySwap
          </Link>
          <div className="flex items-center space-x-4">
            <Link to="/" className="text-white hover:text-gray-200">
              Home
            </Link>
            <Link to="/about" className="text-white hover:text-gray-200">
              About
            </Link>
          </div>
        </div>
      </div>
    </nav>
  );
}

export default Navbar;-e \n\n--- ./src/components/BottomNav.js ---\n\n
import React from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { Home, MessageSquare, PlusCircle, User } from 'lucide-react';

function BottomNav() {
  const navigate = useNavigate();
  const location = useLocation();

  const isActive = (path) => location.pathname === path;

  return (
    <nav className="fixed bottom-0 w-full bg-white border-t border-gray-200">
      <div className="flex justify-around items-center h-16">
        <button 
          onClick={() => navigate('/')}
          className={`flex flex-col items-center ${isActive('/') ? 'text-purple-600' : 'text-gray-600'}`}
        >
          <Home size={24} />
          <span className="text-xs mt-1">Home</span>
        </button>
        
        <button 
          onClick={() => navigate('/messages')}
          className={`flex flex-col items-center ${isActive('/messages') ? 'text-purple-600' : 'text-gray-600'}`}
        >
          <MessageSquare size={24} />
          <span className="text-xs mt-1">Messages</span>
        </button>

        <button 
          onClick={() => navigate('/new-listing')}
          className={`flex flex-col items-center ${isActive('/new-listing') ? 'text-purple-600' : 'text-gray-600'}`}
        >
          <PlusCircle size={24} />
          <span className="text-xs mt-1">Sell</span>
        </button>

        <button 
          onClick={() => navigate('/profile')}
          className={`flex flex-col items-center ${isActive('/profile') ? 'text-purple-600' : 'text-gray-600'}`}
        >
          <User size={24} />
          <span className="text-xs mt-1">Profile</span>
        </button>
      </div>
    </nav>
  );
}

export default BottomNav;-e \n\n--- ./src/pages/Profile.js ---\n\n
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { Settings, Package, Star, LogOut } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';

function Profile() {
    const navigate = useNavigate();
    const { user, logout } = useAuth();

    const handleLogout = async () => {
        try {
            await logout();
            navigate('/login');
        } catch (error) {
            console.error('Failed to log out:', error);
        }
    };

    return (
        <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100">
            <div className="w-full max-w-md bg-white rounded-lg shadow-md p-6">
                <div className="flex flex-col items-center pb-6">
                    <div className="w-24 h-24 bg-gray-300 rounded-full flex items-center justify-center text-2xl font-bold mb-4">
                        {user?.displayName?.charAt(0) || user?.email?.charAt(0)}
                    </div>
                    <h2 className="text-2xl font-bold mb-2">{user?.displayName || 'User'}</h2>
                    <p className="text-gray-600">{user?.email}</p>
                </div>

                <div className="grid grid-cols-3 gap-4 mb-6">
                    <div className="text-center">
                        <p className="text-xl font-bold">12</p>
                        <p className="text-gray-600">Listings</p>
                    </div>
                    <div className="text-center">
                        <p className="text-xl font-bold">4.9</p>
                        <p className="text-gray-600">Rating</p>
                    </div>
                    <div className="text-center">
                        <p className="text-xl font-bold">28</p>
                        <p className="text-gray-600">Sold</p>
                    </div>
                </div>

                <div className="space-y-4">
                    <button className="flex items-center w-full p-3 text-left hover:bg-gray-50 rounded-md">
                        <Package className="w-5 h-5 mr-3" />
                        <span>My Listings</span>
                    </button>
                    <button className="flex items-center w-full p-3 text-left hover:bg-gray-50 rounded-md">
                        <Star className="w-5 h-5 mr-3" />
                        <span>Reviews</span>
                    </button>
                    <button className="flex items-center w-full p-3 text-left hover:bg-gray-50 rounded-md">
                        <Settings className="w-5 h-5 mr-3" />
                        <span>Settings</span>
                    </button>
                    <button 
                        onClick={handleLogout}
                        className="flex items-center w-full p-3 text-left hover:bg-gray-50 rounded-md text-red-500"
                    >
                        <LogOut className="w-5 h-5 mr-3" />
                        <span>Log Out</span>
                    </button>
                </div>
            </div>
        </div>
    );
}

export default Profile;-e \n\n--- ./src/pages/About.js ---\n\n
import React from 'react';

function About() {
  return (
    <div className="max-w-2xl mx-auto">
      <h1 className="mb-6 text-3xl font-bold text-gray-800">About HuskySwap</h1>
      <div className="p-6 bg-white rounded-lg shadow">
        <p className="text-gray-600">
          HuskySwap is a marketplace platform designed specifically for University of Washington students
          to buy, sell, and trade items within the campus community. Our platform makes it easy to find
          what you need from fellow Huskies.
        </p>
        <h2 className="mt-6 mb-3 text-xl font-semibold text-gray-800">How It Works</h2>
        <p className="text-gray-600">
          1. Browse listings from UW students<br />
          2. Connect with sellers through the platform<br />
          3. Meet safely on campus for exchanges<br />
          4. Rate your experience to help build trust
        </p>
      </div>
    </div>
  );
}

export default About;-e \n\n--- ./src/pages/Auth.js ---\n\n
import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { Mail, Lock, ArrowRight } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { doc, setDoc } from 'firebase/firestore';
import { db } from '../utils/firebaseConfig';
import signInWithGoogle from '../utils/googleAuth';
import { auth } from '../utils/firebaseConfig';

function Login() {
  const navigate = useNavigate();
  const { login } = useAuth();
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    rememberMe: false
  });

  useEffect(() => {
    const unsubscribe = auth.onAuthStateChanged((user) => {
      if (user) {
        navigate('/');
      }
    });

    return () => unsubscribe();
  }, [navigate]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!formData.email || !formData.password) {
      setError('Please enter both email and password');
      return;
    }

    try {
      setError('');
      setLoading(true);
      
      // First ensure we're starting fresh
      await auth.signOut();
      
      // Then attempt login
      await login(formData.email, formData.password);
      
      navigate('/', { replace: true });
    } catch (error) {
      console.error('Login error:', error);
      setError(
        error.code === 'auth/invalid-email' ? 'Invalid email address' :
        error.code === 'auth/user-disabled' ? 'This account has been disabled' :
        error.code === 'auth/user-not-found' ? 'No account found with this email' :
        error.code === 'auth/wrong-password' ? 'Incorrect password' :
        'Failed to log in. Please try again.'
      );
    } finally {
      setLoading(false);
    }
  };



  const handleGoogleSignIn = async () => {
    try {
      setError('');
      setLoading(true);
      await signInWithGoogle();
      navigate('/');
    } catch (error) {
      setError('Failed to sign in with Google: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="sm:mx-auto sm:w-full sm:max-w-md">
        <h2 className="text-3xl font-bold text-center text-purple-600">
          HuskySwap
        </h2>
        <h2 className="mt-6 text-2xl font-bold text-center text-gray-900">
          Welcome back
        </h2>
        <p className="mt-2 text-center text-gray-600">
          Log in with your UW email
        </p>
      </div>

      <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
        <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
          <form onSubmit={handleSubmit} className="space-y-6">
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                UW Email
              </label>
              <div className="mt-1 relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <Mail className="h-5 w-5 text-gray-400" />
                </div>
                <input
                  id="email"
                  type="email"
                  required
                  className="appearance-none block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                  placeholder="you@uw.edu"
                  value={formData.email}
                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                />
              </div>
            </div>

            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                Password
              </label>
              <div className="mt-1 relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <Lock className="h-5 w-5 text-gray-400" />
                </div>
                <input
                  id="password"
                  type="password"
                  required
                  className="appearance-none block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                  value={formData.password}
                  onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                />
              </div>
            </div>

            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <input
                  id="remember-me"
                  type="checkbox"
                  className="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
                  checked={formData.rememberMe}
                  onChange={(e) => setFormData({ ...formData, rememberMe: e.target.checked })}
                />
                <label htmlFor="remember-me" className="ml-2 block text-sm text-gray-700">
                  Remember me
                </label>
              </div>

              <div className="text-sm">
                <a href="#" className="font-medium text-purple-600 hover:text-purple-500">
                  Forgot password?
                </a>
              </div>
            </div>

            <div>
              <button
                type="submit"
                className="w-full flex justify-center items-center px-4 py-2 border border-transparent rounded-lg shadow-sm text-base font-medium text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500"
              >
                Log in
                <ArrowRight className="ml-2 h-5 w-5" />
              </button>
            </div>
          </form>

          <div className="mt-6">
            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-gray-300" />
              </div>
              <div className="relative flex justify-center text-sm">
                <span className="px-2 bg-white text-gray-500">
                  New to HuskySwap?
                </span>
              </div>
            </div>

            <div className="mt-6">
              <Link
                to="/signup"
                className="w-full flex justify-center items-center px-4 py-2 border border-purple-600 rounded-lg shadow-sm text-base font-medium text-purple-600 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500"
              >
                Create an account
              </Link>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

// src/pages/Signup.js
function Signup() {
  const navigate = useNavigate();
  const { signup, updateUserProfile } = useAuth();
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    password: '',
    confirmPassword: '',
    agreeToTerms: false
  });

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (formData.password !== formData.confirmPassword) {
      return setError('Passwords do not match');
    }

    if (!formData.email.endsWith('@uw.edu')) {
      return setError('Please use your UW email address');
    }

    try {
      setError('');
      setLoading(true);
      const { user } = await signup(formData.email, formData.password);
      
      // Update user profile with name
      await updateUserProfile({
        displayName: `${formData.firstName} ${formData.lastName}`
      });

      // Create user document in Firestore
      await setDoc(doc(db, 'users', user.uid), {
        firstName: formData.firstName,
        lastName: formData.lastName,
        email: formData.email,
        createdAt: new Date().toISOString()
      });

      navigate('/');
    } catch (error) {
      setError('Failed to create account: ' + error.message);
    } finally {
      setLoading(false);
    }
  };
  
    return (
      <div className="min-h-screen bg-gray-50 flex flex-col justify-center py-12 px-4 sm:px-6 lg:px-8">
        <div className="sm:mx-auto sm:w-full sm:max-w-md">
          <h2 className="text-3xl font-bold text-center text-purple-600">
            HuskySwap
          </h2>
          <h2 className="mt-6 text-2xl font-bold text-center text-gray-900">
            Create your account
          </h2>
          <p className="mt-2 text-center text-gray-600">
            Join the UW marketplace community
          </p>
        </div>
  
        <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
          <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
            <form onSubmit={handleSubmit} className="space-y-6">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label htmlFor="firstName" className="block text-sm font-medium text-gray-700">
                    First name
                  </label>
                  <input
                    type="text"
                    required
                    className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                    value={formData.firstName}
                    onChange={(e) => setFormData({ ...formData, firstName: e.target.value })}
                  />
                </div>
                <div>
                  <label htmlFor="lastName" className="block text-sm font-medium text-gray-700">
                    Last name
                  </label>
                  <input
                    type="text"
                    required
                    className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                    value={formData.lastName}
                    onChange={(e) => setFormData({ ...formData, lastName: e.target.value })}
                  />
                </div>
              </div>
  
              <div>
                <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                  UW Email
                </label>
                <div className="mt-1 relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <Mail className="h-5 w-5 text-gray-400" />
                  </div>
                  <input
                    type="email"
                    required
                    className="appearance-none block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                    placeholder="you@uw.edu"
                    value={formData.email}
                    onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                  />
                </div>
              </div>
  
              <div>
                <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                  Password
                </label>
                <input
                  type="password"
                  required
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                  value={formData.password}
                  onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                />
              </div>
  
              <div>
                <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700">
                  Confirm password
                </label>
                <input
                  type="password"
                  required
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                  value={formData.confirmPassword}
                  onChange={(e) => setFormData({ ...formData, confirmPassword: e.target.value })}
                />
              </div>
  
              <div className="flex items-center">
                <input
                  id="terms"
                  type="checkbox"
                  required
                  className="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
                  checked={formData.agreeToTerms}
                  onChange={(e) => setFormData({ ...formData, agreeToTerms: e.target.checked })}
                />
                <label htmlFor="terms" className="ml-2 block text-sm text-gray-700">
                  I agree to the <a href="#" className="text-purple-600">Terms of Service</a> and{' '}
                  <a href="#" className="text-purple-600">Privacy Policy</a>
                </label>
              </div>
  
              <div>
                <button
                  type="submit"
                  className="w-full flex justify-center items-center px-4 py-2 border border-transparent rounded-lg shadow-sm text-base font-medium text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500"
                >
                  Create account
                  <ArrowRight className="ml-2 h-5 w-5" />
                </button>
              </div>
            </form>
  
            <div className="mt-6">
              <div className="relative">
                <div className="absolute inset-0 flex items-center">
                  <div className="w-full border-t border-gray-300" />
                </div>
                <div className="relative flex justify-center text-sm">
                  <span className="px-2 bg-white text-gray-500">
                    Already have an account?
                  </span>
                </div>
              </div>
  
              <div className="mt-6">
                <Link
                  to="/login"
                  className="w-full flex justify-center items-center px-4 py-2 border border-purple-600 rounded-lg shadow-sm text-base font-medium text-purple-600 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500"
                >
                  Log in instead
                </Link>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }
  
  export { Login, Signup };
  -e \n\n--- ./src/pages/Home.js ---\n\n
import React from 'react';

function Home() {
  return (
    <div className="max-w-2xl mx-auto">
      <h1 className="text-2xl font-bold text-gray-800 mb-4">Home</h1>
      <div className="bg-white rounded-lg shadow p-4">
        <p>Welcome to HuskySwap!</p>
      </div>
    </div>
  );
}

export default Home;-e \n\n--- ./src/pages/ChatDetail.js ---\n\n
import React, { useState, useEffect, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { ArrowLeft, Send, Image } from 'lucide-react';
import { db } from '../utils/firebaseConfig'; // Ensure Firebase is configured correctly
import { doc, getDoc, updateDoc, onSnapshot, serverTimestamp } from 'firebase/firestore';
import { useAuth } from '../contexts/AuthContext';

function ChatDetail() {
  const { userId } = useParams();
  const navigate = useNavigate();
  const { user } = useAuth();
  const [message, setMessage] = useState('');
  const [messages, setMessages] = useState([]);
  const [otherUser, setOtherUser] = useState(null);
  const messageListRef = useRef(null);

  useEffect(() => {
    const fetchUser = async () => {
      const userDoc = await getDoc(doc(db, 'users', userId));
      if (userDoc.exists()) setOtherUser(userDoc.data());
    };
    
    const unsubscribe = onSnapshot(doc(db, 'conversations', userId), (doc) => {
      if (doc.exists()) {
        const data = doc.data();
        setMessages(Object.entries(data.messages || {}).map(([id, msg]) => ({ id, ...msg })));
      }
    });

    fetchUser();
    return () => unsubscribe();
  }, [userId]);

  const scrollToBottom = () => {
    if (messageListRef.current) messageListRef.current.scrollTop = messageListRef.current.scrollHeight;
  };

  useEffect(() => scrollToBottom(), [messages]);

  const handleSend = async (e) => {
    e.preventDefault();
    if (!message.trim()) return;

    const newMessage = {
      senderId: user.uid,
      content: message,
      timestamp: serverTimestamp(),
    };

    await updateDoc(doc(db, 'conversations', userId), {
      [`messages.${Date.now().toString()}`]: newMessage,
    });

    setMessage('');
  };

  return (
    <div className="fixed inset-0 bg-white flex flex-col">
      {/* Chat Header */}
      <div className="bg-white border-b px-4 py-3 flex items-center">
        <button onClick={() => navigate('/messages')} className="p-2 -ml-2 hover:bg-gray-100 rounded-full">
          <ArrowLeft size={24} />
        </button>
        <div className="ml-2 flex-1">
          <h2 className="font-semibold text-gray-800">{otherUser ? otherUser.name : 'Loading...'}</h2>
        </div>
      </div>

      {/* Chat Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4" ref={messageListRef}>
        {messages.map((msg) => (
          <div key={msg.id} className={`flex ${msg.senderId === user.uid ? 'justify-end' : 'justify-start'}`}>
            <div className={`max-w-[75%] rounded-2xl px-4 py-2 ${msg.senderId === user.uid ? 'bg-purple-600 text-white' : 'bg-gray-100 text-gray-800'}`}>
              <p>{msg.content}</p>
              <p className="text-xs mt-1">{new Date(msg.timestamp.seconds * 1000).toLocaleTimeString()}</p>
            </div>
          </div>
        ))}
      </div>

      {/* Message Input */}
      <div className="border-t p-4">
        <form onSubmit={handleSend} className="flex items-center gap-2">
          <input type="text" value={message} onChange={(e) => setMessage(e.target.value)} placeholder="Message..." className="flex-1 p-2 border rounded-full focus:outline-none focus:ring-2 focus:ring-purple-500" />
          <button type="submit" disabled={!message.trim()} className="p-2 bg-purple-600 text-white rounded-full disabled:opacity-50">
            <Send size={20} />
          </button>
        </form>
      </div>
    </div>
  );
}

export default ChatDetail;
-e \n\n--- ./src/pages/Messages.js ---\n\n
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { db } from '../utils/firebaseConfig';
import { collection, query, where, onSnapshot } from 'firebase/firestore';
import { useAuth } from '../contexts/AuthContext';

function Messages() {
  const navigate = useNavigate();
  const { user } = useAuth();
  const [conversations, setConversations] = useState([]);

  useEffect(() => {
    if (!user) return;

    const q = query(collection(db, 'conversations'), where('participants', 'array-contains', user.uid));
    const unsubscribe = onSnapshot(q, (snapshot) => {
      const convs = snapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
        otherUser: doc.data().participants.find((uid) => uid !== user.uid),
      }));
      setConversations(convs);
    });

    return () => unsubscribe();
  }, [user]);

  return (
    <div className="container mt-2">
      <h2 className="mb-4 pt-1">Your Conversations</h2>
      <div className="list-group">
        {conversations.map((conv) => (
          <div
            key={conv.id}
            onClick={() => navigate(`/messages/${conv.otherUser}`)}
            className={`p-4 border-b last:border-0 flex items-center gap-3 hover:bg-gray-50 transition-colors`}
          >
            <div className="flex-1">
              <h5 className="font-semibold text-gray-800">{conv.otherUser}</h5>
              <p className="text-sm text-gray-500">{conv.lastMessage}</p>
            </div>
            <span className="text-xs text-gray-500">{conv.timestamp}</span>
          </div>
        ))}
      </div>
    </div>
  );
}

export default Messages;
-e \n\n--- ./src/pages/NewListing.js ---\n\n
import React from 'react';
import { Camera, DollarSign } from 'lucide-react';

function NewListing() {
  return (
    <div className="max-w-2xl mx-auto">
      <h1 className="text-2xl font-bold text-gray-800 mb-4">Create New Listing</h1>
      
      <div className="bg-white rounded-lg shadow p-4">
        <div className="mb-6">
          <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
            <Camera className="mx-auto text-gray-400 mb-2" size={32} />
            <p className="text-gray-600">Tap to add photos</p>
          </div>
        </div>

        <form className="space-y-4">
          <div>
            <label className="block text-gray-700 mb-2">Title</label>
            <input 
              type="text"
              className="w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-purple-500"
              placeholder="What are you selling?"
            />
          </div>

          <div>
            <label className="block text-gray-700 mb-2">Price</label>
            <div className="relative">
              <DollarSign className="absolute left-3 top-2.5 text-gray-400" size={20} />
              <input 
                type="text"
                className="w-full p-2 pl-10 border rounded focus:outline-none focus:ring-2 focus:ring-purple-500"
                placeholder="0.00"
              />
            </div>
          </div>

          <div>
            <label className="block text-gray-700 mb-2">Category</label>
            <select className="w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-purple-500">
              <option>Textbooks</option>
              <option>Electronics</option>
              <option>Furniture</option>
              <option>Clothing</option>
              <option>Other</option>
            </select>
          </div>

          <div>
            <label className="block text-gray-700 mb-2">Description</label>
            <textarea 
              className="w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-purple-500 h-32"
              placeholder="Describe what you're selling..."
            />
          </div>

          <button 
            type="submit"
            className="w-full bg-purple-600 text-white py-3 rounded-lg font-semibold hover:bg-purple-700"
          >
            Post Listing
          </button>
        </form>
      </div>
    </div>
  );
}

export default NewListing;-e \n\n--- ./src/utils/constants.js ---\n\n
export const CATEGORIES = [
    { id: 'textbooks', label: 'Textbooks' },
    { id: 'electronics', label: 'Electronics' },
    { id: 'furniture', label: 'Furniture' },
    { id: 'clothing', label: 'Clothing' },
    { id: 'tickets', label: 'Tickets' },
    { id: 'other', label: 'Other' }
  ];
  
  export const LISTING_STATUS = {
    ACTIVE: 'active',
    SOLD: 'sold',
    PENDING: 'pending',
    ARCHIVED: 'archived'
  };
  
  export const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB
  export const ALLOWED_FILE_TYPES = ['image/jpeg', 'image/png', 'image/webp'];
  export const MAX_IMAGES_PER_LISTING = 5;
  
  export const ERROR_MESSAGES = {
    INVALID_EMAIL: 'Please use your UW email address',
    WEAK_PASSWORD: 'Password must be at least 8 characters with 1 uppercase, 1 lowercase, and 1 number',
    PASSWORDS_NOT_MATCH: 'Passwords do not match',
    GENERIC_ERROR: 'Something went wrong. Please try again.',
    UNAUTHORIZED: 'You must be logged in to perform this action'
  };
  
  export const ROUTES = {
    HOME: '/',
    LOGIN: '/login',
    SIGNUP: '/signup',
    PROFILE: '/profile',
    MESSAGES: '/messages',
    NEW_LISTING: '/new-listing',
    LISTING: '/listing/:id',
    CHAT: '/messages/:chatId'
  };-e \n\n--- ./src/utils/firebaseConfig.js ---\n\n
import { initializeApp } from "firebase/app";
import { getAnalytics } from "firebase/analytics";
import { getAuth, onAuthStateChanged } from "firebase/auth";
import { getFirestore } from "firebase/firestore";
import { getStorage } from 'firebase/storage';

const firebaseConfig = {
  apiKey: "AIzaSyAwtu8gPlyVeNuScupS4ZWmgYYfe40x7ns",
  authDomain: "huskyswap-237c0.firebaseapp.com",
  projectId: "huskyswap-237c0",
  storageBucket: "huskyswap-237c0.appspot.com",
  messagingSenderId: "493294037363",
  appId: "1:493294037363:web:16ff68d021616cd3a23d06",
  measurementId: "G-8RCCXELHKH",
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);
const storage = getStorage(app);
const analytics = getAnalytics(app);

export { app, auth, db, analytics, storage, onAuthStateChanged };-e \n\n--- ./src/utils/firestoreHelpers.js ---\n\n
import { 
    doc, 
    getDoc, 
    setDoc, 
    updateDoc, 
    deleteDoc, 
    collection,
    query,
    where,
    orderBy,
    limit,
    getDocs
  } from 'firebase/firestore';
  import { db } from './firebaseConfig';
  
  // User related helpers
  export const getUserProfile = async (userId) => {
    const docRef = doc(db, 'users', userId);
    const docSnap = await getDoc(docRef);
    return docSnap.exists() ? docSnap.data() : null;
  };
  
  export const updateUserProfile = async (userId, data) => {
    const docRef = doc(db, 'users', userId);
    await updateDoc(docRef, data);
  };
  
  // Listing related helpers
  export const createListing = async (listingData) => {
    const listingsRef = collection(db, 'listings');
    const newListing = {
      ...listingData,
      createdAt: new Date().toISOString(),
      status: 'active'
    };
    const docRef = doc(listingsRef);
    await setDoc(docRef, newListing);
    return docRef.id;
  };
  
  export const getListings = async (filters = {}) => {
    const listingsRef = collection(db, 'listings');
    let q = query(listingsRef);
  
    // Apply filters
    if (filters.category) {
      q = query(q, where('category', '==', filters.category));
    }
    if (filters.userId) {
      q = query(q, where('userId', '==', filters.userId));
    }
    if (filters.status) {
      q = query(q, where('status', '==', filters.status));
    }
  
    // Apply sorting
    q = query(q, orderBy('createdAt', 'desc'));
  
    // Apply limit
    if (filters.limit) {
      q = query(q, limit(filters.limit));
    }
  
    const querySnapshot = await getDocs(q);
    return querySnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    }));
  };
  
  // Message related helpers
  export const createChat = async (participants, listingId) => {
    const chatsRef = collection(db, 'chats');
    const newChat = {
      participants,
      listingId,
      createdAt: new Date().toISOString(),
      lastMessage: null,
      lastMessageTime: null
    };
    const docRef = doc(chatsRef);
    await setDoc(docRef, newChat);
    return docRef.id;
  };
  
  export const sendMessage = async (chatId, userId, message) => {
    const messagesRef = collection(db, `chats/${chatId}/messages`);
    const newMessage = {
      userId,
      message,
      timestamp: new Date().toISOString(),
      read: false
    };
    const docRef = doc(messagesRef);
    await setDoc(docRef, newMessage);
  
    // Update chat with last message
    const chatRef = doc(db, 'chats', chatId);
    await updateDoc(chatRef, {
      lastMessage: message,
      lastMessageTime: new Date().toISOString()
    });
  
    return docRef.id;
  };-e \n\n--- ./src/utils/googleAuth.js ---\n\n
import { signInWithPopup, GoogleAuthProvider } from 'firebase/auth';
import { doc, getDoc, setDoc } from 'firebase/firestore';
import { auth, db } from './firebaseConfig';

const signInWithGoogle = async () => {
  try {
    const provider = new GoogleAuthProvider();
    // Only allow @uw.edu emails
    provider.setCustomParameters({
      'hd': 'uw.edu'
    });
    
    const result = await signInWithPopup(auth, provider);
    const user = result.user;

    // Verify UW email
    if (!user.email.endsWith('@uw.edu')) {
      throw new Error('Please use your UW email address');
    }

    // Check if user profile exists
    const userDocRef = doc(db, 'users', user.uid);
    const userDoc = await getDoc(userDocRef);

    if (!userDoc.exists()) {
      // Create a new user profile
      const newUser = {
        id: user.uid,
        name: user.displayName,
        email: user.email,
        photoURL: user.photoURL,
        joined: new Date().toISOString()
      };

      await setDoc(userDocRef, newUser);
    }

    return user;
  } catch (error) {
    console.error('Error signing in with Google:', error);
    throw error;
  }
};

export default signInWithGoogle;-e \n\n--- ./src/utils/validation.js ---\n\n
export const isValidEmail = (email) => {
    return email && email.endsWith('@uw.edu');
  };
  
  export const isValidPassword = (password) => {
    // At least 8 characters, 1 uppercase, 1 lowercase, 1 number
    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,}$/;
    return passwordRegex.test(password);
  };
  
  export const validateListing = (listing) => {
    const errors = {};
    
    if (!listing.title?.trim()) {
      errors.title = 'Title is required';
    }
    
    if (!listing.price || listing.price <= 0) {
      errors.price = 'Valid price is required';
    }
    
    if (!listing.category) {
      errors.category = 'Category is required';
    }
    
    if (!listing.description?.trim()) {
      errors.description = 'Description is required';
    }
  
    return {
      isValid: Object.keys(errors).length === 0,
      errors
    };
  };
  
  export const formatPrice = (price) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(price);
  };
  
  export const formatDate = (dateString) => {
    const date = new Date(dateString);
    return new Intl.DateTimeFormat('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric'
    }).format(date);
  };